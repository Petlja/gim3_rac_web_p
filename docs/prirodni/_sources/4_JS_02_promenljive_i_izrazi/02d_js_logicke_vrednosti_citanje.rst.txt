Логичке вредности и изрази
==========================

Тип који садржи логичке вредности се назива *boolean* по енглеском математичару - логичару, Џорџу Булу (*George Boole*). У овај тип спадају само две вредности - тачно и нетачно. Оне се у програмима записују са ``true`` (тачно) и ``false`` (нетачно).

**Логички изрази** су изрази чији резултат је логичка вредност. Логичке изразе најчешће добијамо поређењем других, пре свеха бројчаних израза. Бројчани изрази се у *JavaScript* програмима могу поредити на сличан начин као у математици. Симболи који се користе за означавање односа (релација) између бројева се донекле разликују у програмирању и математици. Следећа табела даје преглед ознака коришћених релација.

.. csv-table:: Релацијски оператори
    :header: "JavaScript", "Математика", "Значење"
    :widths: 20, 20, 60
    :align: left

    a < b,      :math:`a < b`,       a је мање од b
    a <= b,     :math:`a \leq b`,    a је мање или једнако b
    a > b,      :math:`a > b`,       a је веће од b
    a >= b,     :math:`a \geq b`,    a је веће или једнако b
    a == b,     :math:`a = b`,       a је једнако са b
    a != b,     :math:`a \neq b`,    a није једнако са b
                            
Ознаке ``<``, ``<=``, ``>``, ``>=``, ``==``, ``!=`` се у прогрaмирању често називају релацијским операторима, а релације облика ``a < b`` се називају логички изрази. Тиме се наглашава да овде није реч о констатовању и изражавању односа између датих бројева, него о израчунавању тог односа. Према томе, запис ``a < b`` треба да схватимо као **израз** чија је вредност у сваком конкретном случају "тачно" или "нетачно". Вредности таквих израза могу да се исписују на исти начин као и било које друге вредности. На пример, следећи програм учитава два цела броја и исписује вредност израза ``a < b``:

.. activecode:: relacija_js
    :language: javascript
    :nocodelens:

    let a = parseInt(prompt('a=?'));
    let b = parseInt(prompt('b=?'));
    alert(a < b);

Видели смо да се оператор надовазивања ``+`` може користити између стринга и броја. При томе се пре надовезивања број конвертује у одговарајућу текстуалну вредност. Слично се дешава и када поредимо стринг са бројем:

.. activecode:: jednako1_js
    :language: javascript
    :nocodelens:

    alert(2 == "2");

Да би се два податка могла поредити, они морају да буду истог типа. Када подаци које поредимо нису истог типа, *JavaScript* ће покушати да их прво сведе на исти тип, а затим упореди.

Ако не желимо да се подаци своде на исти тип ради поређења, треба уместо ``==`` писати ``===``

.. activecode:: jednako2_js
    :language: javascript
    :nocodelens:

    alert(2 === "2");

У овом случају се типови података не уједначавају, па пошто подаци нису истог типа - они се сматрају различитим.

|

Исто тако, користећи операторе ``!=`` и ``!==`` можемо да проверавамо да ли су две вредности различите. При употреби оператора ``!=`` *JavaScript* ће покушати да уједначи типове и тек онда да упореди вредности, док се при употреби оператора ``!==`` уједначавање типова не покушава. Проверите да ли сте ово разумели тако што ћете покушати да предвидите резултат рада следећег програма.
    
.. activecode:: jednako3_js
    :language: javascript
    :nocodelens:

    alert(`2 != "2": ${2 != "2"}`);
    alert(`2 !== "2": ${2 !== "2"}`);
    
    alert(`2 != "3": ${2 != "3"}`);
    alert(`2 !== "3": ${2 !== "3"}`);
    
Након ових објашњења, можемо да проширимо табелу ралацијских оператора са почетка ове стране:

.. csv-table:: Релацијски оператори
    :header: "JavaScript", "Математика", "Значење"
    :widths: 20, 20, 60
    :align: left

    a < b,      :math:`a < b`,       a је мање од b
    a <= b,     :math:`a \leq b`,    a је мање или једнако b
    a > b,      :math:`a > b`,       a је веће од b
    a >= b,     :math:`a \geq b`,    a је веће или једнако b
    a == b,     :math:`a = b`,       a је једнако са b по вредности (уз уједначавање типа по потреби)
    a != b,     :math:`a \neq b`,    a није једнако са b по вредности (чак ни уз уједначавање типа)
    a === b,    :math:`a = b`,       a је једнако са b по вредности и типу
    a !== b,    :math:`a \neq b`,    a није једнако са b по вредности и типу

|

Једноставне логичке изразе попут :math:`a < b` можемо да комбинујемо користећи речи **не**, **и** и **или**. Тако формирамо сложеније логичке изразе. На пример, ако нас интересује да ли је вредност :math:`x` у интервалу :math:`(a, b)`, ми у ствари желимо да проверимо да ли истовремено важи :math:`a < x` и :math:`x < b`, што се математички записује :math:`(a < x) \land (x < b)`.

Уопште, ако су ``p`` и ``q`` логичке вредности, од њих можемо да формирамо овакве логичке изразе:

.. csv-table:: Логички оператори
    :header: "Оператор", "Математика", "JavaScript", "Значење", "тачан ако и само ако"
    :widths: 15, 15, 15, 15, 40
    :align: left

    негација,    :math:`\neg p`,        !p,       није *p*, "*p* је нетачан"
    конјункција, :math:`p \land q`,     p && q,   *p* и *q*, "*p* и *q* су оба тачни"
    дисјункција, :math:`p \lor q`,      p || q,   *p* или *q*, "бар један од *p* и *q* је тачан"

Негација је унарни оператор, што значи да се примењује на један логички израз. Конјункција и дисјункција су бинарни оператори, то јест они повезују по два логичка израза у један сложенији.

Од ова три оператора, негација има највиши приоритет, затим конјункција (логичко и), а најнижи приоритет има дисјункција (логичко или). Тако на пример, ако су *p*, *q* и *r* логичке променљиве, запис ``p || q && r`` има исто значење као ``p || (q && r)``.

У следећој табели дато је неколико примера.

.. csv-table:: Примена логичких оператора
    :header: "Жељено значење израза", "Преформулисано значење", "Запис у програму"
    :widths: 30, 30, 40
    :align: left

    *x* је једноцифрен број,                    *x* је веће или једнако 0 **и** *x* је мање од 10,    ``0 <= x && x < 10``
    број *x* није (позитиван) двоцифрен број,   *x* је мање од 10 или веће од 99,                     ``x < 10 || x > 99``
    (претходни ред на други начин),             **није** (*x* ≥ 10 **и** *x* ≤ 99),                   ``!(x >= 10 && x <= 99)``
    *x* није мање од 10,                        -- (преформулација није потребна),                    ``!(x < 10)``
    "*a*, *b* и *c* су поређани по величини",   (a ≤ b **и** b ≤ c) **или** (a ≥ b **и** b ≥ c),      ``(a <= b && b <= c) || (a >= b && b >= c)``
    
