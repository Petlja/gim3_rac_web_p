Логичке вредности и изрази
==========================

Тип који садржи логичке вредности се назива *boolean* по енглеском математичару - логичару, Џорџу Булу (*George Boole*). У овај тип спадају само две вредности - тачно и нетачно. Оне се у програмима записују са ``true`` (тачно) и ``false`` (нетачно).

**Логички изрази** су изрази чији резултат је логичка вредност. Логичке изразе најчешће добијамо поређењем других, пре свега бројчаних израза. Бројчани изрази се у *JavaScript* програмима могу поредити на сличан начин као у математици. Симболи који се користе за означавање односа (релација) између бројева се донекле разликују у програмирању и математици. Следећа табела даје преглед ознака коришћених релација.

.. csv-table:: Релацијски оператори
    :header: "JavaScript", "Математика", "Значење"
    :widths: 20, 20, 60
    :align: left

    a < b,      :math:`a < b`,       a је мање од b
    a <= b,     :math:`a \leq b`,    a је мање или једнако b
    a > b,      :math:`a > b`,       a је веће од b
    a >= b,     :math:`a \geq b`,    a је веће или једнако b
    a === b,    :math:`a = b`,       a је једнако са b
    a !== b,    :math:`a \neq b`,    a није једнако са b
                            
Ознаке ``<``, ``<=``, ``>``, ``>=``, ``===``, ``!==`` се у прогрaмирању често називају релацијским операторима, или операторима поређења. Међутим, мада се у математици запис облика ``a < b`` назива релација, у програмирању овакве записе треба звати логичким изразима. Тиме се наглашава да овде није реч о констатовању или претпостављању односа између датих бројева, него о израчунавању тог односа. Према томе, запис ``a < b`` треба да схватимо као **израз** чија је вредност у сваком конкретном случају "тачно" или "нетачно". Вредности таквих израза могу да се исписују на исти начин као и било које друге вредности. На пример, следећи програм учитава два цела броја и исписује вредност израза ``a < b``:

.. activecode:: relacija_js
    :language: javascript
    :nocodelens:

    let a = parseInt(prompt('a=?'));
    let b = parseInt(prompt('b=?'));
    alert(a < b);

Нагласимо да, када се користе оператори ``===`` и  ``!==``, вредности различитог типа се смартају различитим. На пример:

.. activecode:: precizna_jednakost_js
    :language: javascript
    :nocodelens:

    alert(`2 === 2: ${2 === 2}`);
    alert(`2 === "2": ${2 === "2"}`);

    alert(`2 !== 2: ${2 !== 2}`);
    alert(`2 !== "2": ${2 !== "2"}`);

Вероватно ћете у програмима на језику *JavaScript* наилазити и на операторе ``==`` и ``!=``, који такође служе за проверу да ли су две вредности једнаке, односно да ли су различите. За разлику од претходних, код ових оператора (као и код оператора ``<``, ``<=``, ``>`` и ``>=``) се пре поређења покушава свођење двеју вредности на исти тип. Упоредимо резултат извршавања претходног примера са следећим:

.. activecode:: neprecizna_jednakost_js
    :language: javascript
    :nocodelens:

    alert(`2 == 2: ${2 == 2}`);
    alert(`2 == "2": ${2 == "2"}`);

    alert(`2 != 2: ${2 != 2}`);
    alert(`2 != "2": ${2 != "2"}`);

Можемо рећи да се оператори ``==`` и ``!=`` понашају донекле слично као оператор ``+`` између стринга и броја (знамо да израз ``"2" + 3`` има вредност ``"23"``).

На жалост, показло се да је употреба оператора ``==`` и ``!=`` у извесном смислу варљива. Наиме, алгоритам свођења разнородних података на исти тип (који се користи код ових оператора) није једноставан и садржи нека правила која могу да буду изненађујућа. Тако се дешава да при употреби оператора ``==`` и ``!=`` понекад добијемо неочекиван резултат. Навешћемо само један мали пример, уз напомену да има и необичнијих. 

На основу транзитивности једнакости у математици, очекивали бисмо да када логички изрази ``a == b`` и ``b == c`` имају вредност тачно, да онда и израз ``a == c`` мора да има вредност тачно. Да то није тако, видимо покретањем следећег програма:
        
.. activecode:: jednakost_nije_tranzitivna_js
    :language: javascript
    :nocodelens:

    const a = "0";
    const b = 0;
    const c = "";
    
    const s1 = `a == b: ${a == b}\n`;
    const s2 = `b == c: ${b == c}\n`;
    const s3 = `a == c: ${a == c}\n`;
    alert(s1 + s2 + s3);

Поменимо узгред да текст ``\n`` има специјално значење - тај текст се не приказује онако како је написан, већ уместо тога изазива прелазак у следећи ред.

.. infonote::

    Због описаних скривених ефеката оператора ``==`` и ``!=``, **препоручује се да се као главни начин поређења у програмима користе оператори** ``===`` **и** ``!==``.
    
    Операторе ``==`` и ``!=`` треба користити само изузетно, када нам оператори ``===`` и ``!==`` не одговарају (и при томе смо свесни могућих скривених ефеката употребљених оператора). 
    
Сложени логички изрази
----------------------

Једноставне логичке изразе попут :math:`a < b` можемо да комбинујемо користећи речи **не**, **и** и **или**. Тако формирамо сложеније логичке изразе. На пример, ако нас интересује да ли је вредност :math:`x` у интервалу :math:`(a, b)`, ми у ствари желимо да проверимо да ли истовремено важи :math:`a < x` и :math:`x < b`, што се математички записује :math:`(a < x) \land (x < b)`.

Уопште, ако су ``p`` и ``q`` логичке вредности, од њих можемо да формирамо овакве логичке изразе:

.. csv-table:: Логички оператори
    :header: "Оператор", "Математика", "JavaScript", "Значење", "тачан ако и само ако"
    :widths: 15, 15, 15, 15, 40
    :align: left

    негација,    :math:`\neg p`,        !p,       није *p*, "*p* је нетачан"
    конјункција, :math:`p \land q`,     p && q,   *p* и *q*, "*p* и *q* су оба тачни"
    дисјункција, :math:`p \lor q`,      p || q,   *p* или *q*, "бар један од *p* и *q* је тачан"

Негација је унарни оператор, што значи да се примењује на један логички израз. Конјункција и дисјункција су бинарни оператори, то јест они повезују по два логичка израза у један сложенији.

Од ова три оператора, негација има највиши приоритет, затим конјункција (логичко и), а најнижи приоритет има дисјункција (логичко или). Тако на пример, ако су *p*, *q* и *r* логичке променљиве, запис ``p || q && r`` има исто значење као ``p || (q && r)``.

У следећој табели дато је неколико примера.

.. csv-table:: Примена логичких оператора
    :header: "Жељено значење израза", "Преформулисано значење", "Запис у програму"
    :widths: 30, 30, 40
    :align: left

    *x* је једноцифрен број,                    *x* је веће или једнако 0 **и** *x* је мање од 10,    ``0 <= x && x < 10``
    број *x* није (позитиван) двоцифрен број,   *x* је мање од 10 **или** веће од 99,                 ``x < 10 || x > 99``
    (претходни ред на други начин),             **није** (*x* ≥ 10 **и** *x* ≤ 99),                   ``!(x >= 10 && x <= 99)``
    *x* није мање од 10,                        (преформулација није потребна),                       ``!(x < 10)``
    "*a*, *b* и *c* су поређани по величини",   (a ≤ b **и** b ≤ c) **или** (a ≥ b **и** b ≥ c),      ``(a <= b && b <= c) || (a >= b && b >= c)``
